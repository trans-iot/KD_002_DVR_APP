<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns:b="http://www.springframework.org/schema/beans"
    xmlns="http://www.springframework.org/schema/security"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
	<b:bean id="ssoDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">    
		<b:property name="jndiName" value="java:comp/env/ssoDS" />
    </b:bean>

    <http entry-point-ref="casEntryPoint" use-expressions="true">
    	<intercept-url pattern="/css" access="permitAll"/>
    	<intercept-url pattern="/images" access="permitAll"/>
    	<intercept-url pattern="/js" access="permitAll"/>
    	<intercept-url pattern="/script" access="permitAll"/>
    	<intercept-url pattern="/j_spring_cas_security_check" access="permitAll"/>
    	<intercept-url pattern="/index.jsp" access="hasRole('ROLE_USER')" />
        <intercept-url pattern="/**/*.html" access="hasRole('ROLE_USER')" />
        <custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
        <custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>
        <custom-filter ref="casFilter" position="CAS_FILTER" />
        <logout logout-success-url="/index.jsp"/>
    </http>

    <authentication-manager alias="authManager">
        <authentication-provider ref="casAuthProvider" />
    </authentication-manager>

	<b:bean id="userService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl" autowire="byName">
		<b:property name="dataSource" ref="ssoDataSource" />
		<b:property name="usersByUsernameQuery">
			<b:value>
			<![CDATA[
				SELECT user_name as Login,'NOT EMPTY' as Password,1 as Enabled FROM CW_TB_SSO_USER_PROF WHERE USER_ID=?
			]]>
			</b:value>
		</b:property>
		<b:property name="authoritiesByUsernameQuery">
			<b:value>
			<![CDATA[
				SELECT user_name as USERNAME,'ROLE_USER' as authority FROM CW_TB_SSO_USER_PROF WHERE USER_NAME=?
			]]>
			</b:value>
		</b:property>
		<b:property name="groupAuthoritiesByUsernameQuery">
			<b:value>
			<![CDATA[
				SELECT user_id as id,'SPAS V3' as group_name, 'ROLE_USER' as authority FROM CW_TB_SSO_USER_PROF WHERE USER_NAME=?
			]]>
			</b:value>
		</b:property>
		<b:property name="usernameBasedPrimaryKey" value="false" />
	</b:bean>

    <!-- This filter handles a Single Logout Request from the CAS Server -->
    <b:bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>
    <!-- This filter redirects to the CAS Server to signal Single Logout should be performed -->
    <b:bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter"
        p:filterProcessesUrl="/j_spring_cas_security_logout">
        <b:constructor-arg value="${cas.server.protocal}://${cas.server.ip}:${cas.server.port}/${cas.server.path}/logout"/>
        <b:constructor-arg>
            <b:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </b:constructor-arg>
    </b:bean>

    <b:bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties"
        p:service="${cas.client.protocal}://${cas.client.ip}:${cas.client.port}/${cas.client.path}/j_spring_cas_security_check"
        p:authenticateAllArtifacts="true"/>
    <!--     
    <b:bean id="casEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint"
        p:serviceProperties-ref="serviceProperties" 
        p:loginUrl="${cas.server.protocal}://${cas.server.ip}:${cas.server.port}/${cas.server.path}/login" />
      -->   
	<b:bean id="casEntryPoint" class="tw.com.sso.CasAuthenticationEntryPoint"
		p:serviceProperties-ref="serviceProperties" 
        p:loginUrl="${cas.server.protocal}://${cas.server.ip}:${cas.server.port}/${cas.server.path}/remoteLogin"
        p:localLoginUrl="${cas.client.protocal}://${cas.client.ip}:${cas.client.port}/${cas.client.path}/sso/login.jsp" />
        
    
	<b:bean id="casFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter"
        p:authenticationManager-ref="authManager"
        p:serviceProperties-ref="serviceProperties"
        p:proxyGrantingTicketStorage-ref="pgtStorage"
        p:proxyReceptorUrl="/j_spring_cas_security_proxyreceptor">
        <b:property name="authenticationDetailsSource">
            <b:bean class="org.springframework.security.cas.web.authentication.ServiceAuthenticationDetailsSource"/>
        </b:property>
        <b:property name="authenticationFailureHandler">
            <b:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
                p:defaultFailureUrl="/casfailed.jsp"/>
        </b:property>
    </b:bean> 
    
    <!--
        NOTE: In a real application you should not use an in memory implementation. You will also want
              to ensure to clean up expired tickets by calling ProxyGrantingTicketStorage.cleanup()
     -->
    <b:bean id="pgtStorage" class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl"/>
    <b:bean id="casAuthProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider"
        p:serviceProperties-ref="serviceProperties"
        p:key="casAuthProviderKey">
        <b:property name="authenticationUserDetailsService">
            <b:bean class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                <b:constructor-arg ref="userService" />
            </b:bean>
        </b:property>
        <b:property name="ticketValidator">
            <b:bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator"
 				p:proxyCallbackUrl="${cas.client.protocal}://${cas.client.ip}:${cas.client.port}/${cas.client.path}/j_spring_cas_security_proxyreceptor"
                p:proxyGrantingTicketStorage-ref="pgtStorage">
                <b:constructor-arg value="${cas.server.protocal}://${cas.server.ip}:${cas.server.port}/${cas.server.path}" />
            </b:bean>
        </b:property>
        <b:property name="statelessTicketCache">
            <b:bean class="org.springframework.security.cas.authentication.EhCacheBasedTicketCache">
                <b:property name="cache">
                    <b:bean class="net.sf.ehcache.Cache"
                      init-method="initialise"
                      destroy-method="dispose">
                        <b:constructor-arg value="casTickets"/>
                        <b:constructor-arg value="50"/>
                        <b:constructor-arg value="true"/>
                        <b:constructor-arg value="false"/>
                        <b:constructor-arg value="3600"/>
                        <b:constructor-arg value="900"/>
                    </b:bean>
                </b:property>
            </b:bean>
        </b:property>
    </b:bean>
    
    <b:bean id="authenticationUserDetailsService" class="org.springframework.security.cas.userdetails.GrantedAuthorityFromAssertionAttributesUserDetailsService">  
	  <b:constructor-arg>  
	    <b:array>  
	      <b:value>role</b:value>  
	    </b:array>  
	  </b:constructor-arg>  
	</b:bean> 

</b:beans>
